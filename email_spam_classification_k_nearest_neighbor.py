# -*- coding: utf-8 -*-
"""Email Spam Classification K-Nearest Neighbor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vghzIJ-syrylDW64di_9hC0CGIIsjzZv

# Importing Libraries
"""



# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns  
from sklearn.utils import shuffle
import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline



"""# Reading the Dataset of Emails"""

emails = pd.read_csv('/content/drive/MyDrive/AI N Ml Stuff/spam.csv',encoding='latin-1')

emails.head()

emails.shape

"""# Missing Values"""

print('missing values:', emails.isnull().sum())

"""# Dropping columns with Missing values"""

emails.drop(['Unnamed: 2','Unnamed: 3','Unnamed: 4'], axis=1 , inplace=True)

emails

"""# Shuffling the emails to avoid Bias"""

emails = shuffle(emails,random_state = 22)

emails.head(10)

emails['v1'] = emails['v1'].map({'ham':0,'spam':1})

emails.head(7)

"""# Spam and not spam emails"""

emails['v1'].value_counts()

sns.catplot(x="v1", kind="count", data=emails)

"""# Changing words """

from sklearn.feature_extraction.text import CountVectorizer

CV = CountVectorizer(min_df=1, stop_words="english",lowercase="True")

X = emails['v2']
Y = emails['v1']

X = CV.fit_transform(X)

"""# Splitting Data to training anf testing data"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train,y_test = train_test_split(X,Y,test_size=0.2)

x_train.shape, x_test.shape

"""# Importing K-Nearest Neighbors"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=3)

from sklearn.model_selection import cross_val_score

knn.fit(x_train,y_train)

score = cross_val_score(knn,x_train,y_train, scoring="r2", cv=10)

score.mean()

score1=cross_val_score(knn, x_test, y_test, scoring="r2",cv=10)

knn.score(x_test,y_test)

import pickle

pickle.dump(knn,open("spam.pkl","wb"))
pickle.dump(CV,open("vectorizer.pkl","wb"))

clf_knn = pickle.load(open("spam.pkl","rb"))
msg = "@the $thd"
data = [msg]
vect = CV.transform(data).toarray()
result = knn.predict(vect)

print(result)

